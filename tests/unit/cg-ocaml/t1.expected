ocaml code:
```
(* generated from imandra-ast *)

open Imandra_prelude;;

module DJ_Z = struct
  type t = Z.t
  let to_yojson t = `Int (Z.to_int t)
  let of_yojson = function
    | `Int i -> Ok (Z.of_int i)
    | _ -> Error "DJ_Z.of_yojson"
end

module DJ_Q = struct
  type t = Q.t
  let to_yojson t = `Float (Q.to_float t)
  let of_yojson = function
    | `Float f -> Ok (Q.of_float f)
    | _ -> Error "DJ_Q.of_yojson"
end


type complex = {
  re: DJ_Z.t;
  im: DJ_Z.t;
}[@@deriving yojson]

type point = 
  | Polar of DJ_Z.t * DJ_Z.t
  | Cartesian of complex
[@@deriving yojson]

let c_plus = (fun c1 ->
 (fun c2 ->
 {re=( c1.re +  c2.re); im=( c1.im +  c2.im)}))

let is_cartesian = (fun _x ->
 (match _x with
| Polar(_,_) -> false
| Cartesian(_) -> true
))


```
